프로그래밍 기초

프로그래밍이란?
 c,c++,java,python.....
 영문(인간) -> 컴파일러 -> 기계어 -> cpu -> 실행 -> 결과물

코딩 공부 방법
 반드시 디버깅 해볼것 : 의도에 맞게 프로그램이 실행되는지 확인
 알고리즘 자료구조 공부 -> 코딩 테스트 필수(효율적인 프로그램 작성)
 다른 사람의 소스코드 참조 : 깃허브 오픈소스
 주석:코드의 이해 증가
 자기가 만들고 싶은 프로그램을 정확하게 정의 하는 것이 중요 : 단위로 나누어서 정의

좋은 프로그램이란?
 코드의 가독성
 코드의 길이 : 불필요한 변수,문장 등 -> 가독성과 연관
 변수의 이름 : 의미있는 이름 사용
 중복 코드 줄이기 -> 효율성, 가독성과 관련 -> 공간복잡도, 시간복잡도 고려

파이썬이란?
 오픈소스 프로젝트.
 귀도 반 로섬
 1989년 12월 크리스마스 주중에 취미가 될 것을 찾다가 개발
 1991년 발표
 인터프리터 언어
 좋아하는 코미디 프로그램 Monty Python'sFlying circus에서 따온 이름

파이썬 print 사용법
separator 사용
end 사용
python format 사용

참고: Escape 코드
\n : 개행
\t : 탭
\\ : 문자
\' : 문자
\" : 문자
\000 : 널 문자

파이썬을 배우는 이유
 구글 python using sites 검색해볼것.
활용 분야
 인공지능
 업무자동화
 데이터 분석, 머신러닝 -> 오프소스의 강력함으로 가능
 사물인터넷(IOT):라즈베리파이
 얼굴인식
 웹크롤링
 GUI 프로그래밍:pyQT
 게임개발등
 웹프로그래밍:flask,Django

기본 환경 설정
파이썬 개발 환경
 파이썬 설치
 다양한 IDE
 파이썬 기본 IDLE 실행

에디터 설치 및 실행
 
문자열 포매팅 방법
format
c 스타일
더 직관적인 f-string

문자열 포매팅이란
 문자열을 예쁘게 만드는 방법
 문자열 중간 특정 부분에 우리가 원하는 값을 넣기 위해 사용하는 것
 문자열을 만들 때 원하는 위치에 특정한 값(변수)를 삽입해서 문자열을 그때그때 예쁘게 출력

format
 형식)"{인덱스0},{인덱스1}.format(값0,값1)

% 서식문자 
 % 기호 뒤에 자료형을 기리키는 문자 사용

ex)정수 풀력 시
%+d=>%d 사용
num = 10
s = 'my age %d' % num
print(s)

문자열 , 정수, 실수를 %로 포매팅 해보기
%기호 문자 출력
names = ['Kim', 'park', 'lee']
for name in names:
    print('my name is %s' % name)

% 기호 정수 출력
money = 1000
s2 = 'give me %d won' % money
print(s2)

% 기호 실수 출력
d = 3.141592
print('value %f' % d)

%서식문자를 이용한 문자 포매팅은 언뜻 보면 타입을 정해주기때문에 정확해 보이지만, 타입을 정해야하기 때문에 불편한 점도 존재
이를 개선하기 위해서 str.format 형식 등장
 	그 이후에 f-string 방법 등장
본인의 취향에 맞게, 편리한 방법 사용

string formatting - 문자열 포매팅
문자열에서 특정 부분만 바꾸고 나머지 부분은 일정하다고 할때, 문자열 포메팅을 이용해서 보기 좋게 출력

month =1
while month <=12:
    print(f'2020년 {month}월')
    month = month +1
변해야 하는 값이 있는 위치를 포매팅 할 위치로 잡아서 실행

f-string
f-string의 모양은 f와 {}만 알면 됨
문자열 맨 앞에 f를 붇여주고, 중괄호 안에 직접 변수 이름이나 출력하고 싶은것을 바로 넣으면 됨
f'문자열{변수} 문자열'


변수와 함수 소개
프로그래밍 작업을 할때 기본적으로 변수와 함수필요
변수 : 여러 가지 값으로 변할 수 있는 수를 변수라고 한다
프로그램을 작성하면서 변수에는 임의의 값을 담거나 함수가 리턴하는 값을 저장
파이썬은 형식을 미리 선언해서 사용하는 정적인 언어가 아니기 때문에 선언없이 변수의 값을 바로 사용
문자열, 정수, 실수 등을 바로 초기화 해서 사용

함수
 종류
  필요한 기능이 밀 구현되어 있눈 빌트인 함수
  사용자가 직접 정의한 함수
 Apl
 len()이라는 내장 함수는 입력 파라메터(입력 데이터)로 넘겨진 문자열의 길이를 리턴한다
 strB="파이썬 연습"
 len(strB)

변수명
숫자형식
문자열형식
불린형식

키워드
 파이썬 언어에서 제공되는 기본적인 문장
 미리 정의되어 있는 단어
 변수명이나 함수명으로 사용 불가
 파이썬의 키워드는 대락 35개정도

자료형식
숫자형 - 정수 실수 ex)100,1.43
문자열 - 문자들의 모음 ex)'sdsd',"sdsd","sdsd"
리스트-  순서를 가지는 파이썬 임의 객체의 집합으로 []를 사용한다 ex)["sfsd","sfdsd"]
사전 - 순서를 가지지 않는 객체의 집합, 키로 값을 낸다 () 사용 ex)("SdDs","dfsds")
튜플  -순서를 가지는 파니썬 임의 객체 집합으로 내용 변경이 안된다 {}사용 ex){"dfs","sdf"}
세트-  순서를 가지지 않는 유일한 값의 집합 형태로 사용 . 합집함 교집합 차집합을 구할 경우 사용한다  {}사용] ex){1,2,3,3,4}=>1,2,3,4

어떤 경우에 리스틀ㄹ 사용하고 딕셔너리를 사용하는가?
아직은 처음 나오는 형식들이여서 용도가 궁금할수있다
파이썬에서는 다중 데이터를 저장해서 사용하는 경우가 많기 때문에 리스트형식 많이 사용
입력한 순서대로 출력하는 경우라면 당연히 리스트를 사용하는 것이 편리
입력한 순서대로 출력된느 것이 아니라 키를 통한 검색이 필요한다면 입력한 순서대로 출력 되지않는 딕셔너리를 사용할 수도 있다
학습을 하다보면 어떤 경우에 리스트를 사용하고, 튜플을 사용하는지, 또는 딕셔너리가 필요한 경우는 어떤 경우인지 알수 있다.
다양한 데이터들을 다루어 보면서 감각을 익히면 된다
예)직원리스트,제품리스트가 필요한 단순 저리의 경우 : 리스트
    키를 통한 검색이 필요한 경우:딕셔너리

변수와 함수 소개

프로그래밍 작업을 할때 기본적으로 변수와 함수 필요
변수
 여러가지 값으로 변할 수 있는 수를 변수라고한다
프로그램을 작성하면서 변수에는 임의값을 달거나 함수가 리턴하는 값을 저장
파이썬은 형식을 미리 선언해서 사용하는 정적인 언어가 아니기 때문에 선언 없이 변수의 값을 담아서 바로 사용
문자열, 정수, 실수 등을 바로 초기화 해서 사용

문자열
 문자열을 결합할 때 더하기 연산자는 생략 가능
*를 통해 반복 가능

문자열 인덱싱
 문자열에서 원하는 자리의 문자를 가져옴

문자열 슬라이싱
 문자열에서 원하는 부분을 잘라서 가져옴
 0부처 시작하고 끝부분에는 자기 번호를 제외
 뒤쪽에서 카운트를 시작하면 -1부터 시작

리스트(list) :값의 나열
 데이터를 모아 놓은 모록
 순서가 존재하며 여러가지 자료형을 담을 수 있다
 다른 프로그래밍 언어의 배열 대신 사용

append() 메서드
기본 리스트에 값을 추가
insert()메서드
원하는 위치에 추가

index()메서드
어떤값이 어디에 있는지 확인
2번째 인자를 지정하지 않으면 처음부터 검색을 하고
지정을 하면 지정된 방 번호 이후의 아이템의 방 번호 리턴

count()메서드 : 현재 해당 갑의 개수를 반환

pop()메서드 : 값을 뽑아내서 반환

튜플
리스트와 유사:순서가 존재
리스트와 달리 [] 대신()로 묶어서 표현하며 읽기 전용이다
제공되는 함수는 리스트에 비해 적지만 속도는 그만큼 빠르다
튜플은 일반적인 경우에 데이터를 묶어거 한번에 전달하거나 여러개의 값을 묶어서 하넙네 반환할 경우에 사용됩ㄴ다
자동완성 기능을 통해서 보면 실제 제공하는 메서드가 count(),index() 정도만 제공되는 갓을 볼 수 있습니다.

튜플사용되는 경우
함수에서나 하나 이상의 값을 리턴하는 경우
문자열 포맷팅
튜플에 있는 값을 함수 인수로 사용하는 경우

세트 : 수학시간에 배문 집합과 동일
유일한 값의 모임이며 순서는 없다


리스트,세트,튜플은 다음과 같이 생성자list(),set(),tuple()을 이용해서 서로 변환 가능

딕셔너리
강력하면서 알다두면 편리한 자료구조


mutable : 변경되는 객체(객체의 상태를 변경 할 수 있음)
 종류:list,set,디셔너리
immutable: 변경되지 않는 객체(객체의 상태를 변경 할 수 없음)

얕은 복사, 깊은 복사를 이해하기 위해 필요

깊은 복사



분기구문
들여쓰기에 대한 규칙
 특별한 이유가 없다면 가장 바깥쪽에 있는 블록의 코드는 반드시 1열부터 시작해야한다
 내부 블록은 같은 거리만큼 들여쓰기를 한다
 블록의 끝은 들여쓰기가 끝나는 부분으로 간주된다
 탭과 공백은 섞어서 쓰지 않는 것이 좋다. 일반적으로 공백은 2~4칸을 사용한다

기본적인 for문
이터레이션이 가능한 객체를 순차적으로 순회
데이터를 모아 놓은 자료형에서 각 요소를 꺼내어 반복하는 형식으로 구현
다른 프로그래밍 언어가 몇 번 반복할지를 결정하는 것과 달리 파이썬은 전체 요소를 하나씩 꺼내 동작
몇 번 반복할지 정하는 방식으로 프로그램을 구현하려면 range() 함수 사용

break, continue문
반복문을 수행하면서 break문과 continue문을 이요해서 반복문을 제어 할 수 있다.
break 문
 반복을 즉시 멈추고, 반복문 밖으로 제어가 빠져나감
continue
 다음 순서의 반복 시작점으로 제어가 이동

리스트 함축
리스트 내포, 리스트 내장 또는 리스트 함축으로 표기
리스트안에 for문이나 if문을 사용하여 리스트를 사용하는 문


함수 (Function)
함수를 왜 쓰냐? => 반복적인 코드를 정리해 호출해서 사용 , 수정이 편리함
함수를 호출 :측(Caller)
넘기는 변수:인수 or 인자
호출된 함수 안에서 변수를 넘겨받았을때 : 매개변수

연관성 있는 코드를 묶어 넣은 것
대개 여러 번 사용 할 것을 고려하여 만든 고트 조작
실제 코드를 모아서 이름을 붙여 놓고 그 이름을 호출하는 식으로 사용
함수는 우리가 직접 만들 수 있고, 이미 파이썬에 내장 되어 있는 것도 있다.
함수 선언은 def로 시작해서 

형식) def<함수명>(인자1,인자2.......) :
	<구문>


수학 관련 내장 함수
 절댓값:abs()
 진수 변환:bin()mcos(),nex()
 연산:max(),min(),sum(),pow()
 반올림:round()







